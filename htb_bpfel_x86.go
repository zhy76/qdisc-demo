// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadHtb returns the embedded CollectionSpec for Htb.
func LoadHtb() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_HtbBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Htb: %w", err)
	}

	return spec, err
}

// LoadHtbObjects loads Htb and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*HtbObjects
//	*HtbPrograms
//	*HtbMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadHtbObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadHtb()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// HtbSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type HtbSpecs struct {
	HtbProgramSpecs
	HtbMapSpecs
}

// HtbSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type HtbProgramSpecs struct {
	QdiscEnqueue *ebpf.ProgramSpec `ebpf:"qdisc_enqueue"`
}

// HtbMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type HtbMapSpecs struct {
}

// HtbObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadHtbObjects or ebpf.CollectionSpec.LoadAndAssign.
type HtbObjects struct {
	HtbPrograms
	HtbMaps
}

func (o *HtbObjects) Close() error {
	return _HtbClose(
		&o.HtbPrograms,
		&o.HtbMaps,
	)
}

// HtbMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadHtbObjects or ebpf.CollectionSpec.LoadAndAssign.
type HtbMaps struct {
}

func (m *HtbMaps) Close() error {
	return _HtbClose()
}

// HtbPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadHtbObjects or ebpf.CollectionSpec.LoadAndAssign.
type HtbPrograms struct {
	QdiscEnqueue *ebpf.Program `ebpf:"qdisc_enqueue"`
}

func (p *HtbPrograms) Close() error {
	return _HtbClose(
		p.QdiscEnqueue,
	)
}

func _HtbClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed htb_bpfel_x86.o
var _HtbBytes []byte
