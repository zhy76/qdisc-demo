// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadPfifo returns the embedded CollectionSpec for Pfifo.
func LoadPfifo() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PfifoBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Pfifo: %w", err)
	}

	return spec, err
}

// LoadPfifoObjects loads Pfifo and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*PfifoObjects
//	*PfifoPrograms
//	*PfifoMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadPfifoObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadPfifo()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// PfifoSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PfifoSpecs struct {
	PfifoProgramSpecs
	PfifoMapSpecs
}

// PfifoSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PfifoProgramSpecs struct {
	KprobePfifoEnqueue *ebpf.ProgramSpec `ebpf:"kprobe__pfifo_enqueue"`
}

// PfifoMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type PfifoMapSpecs struct {
}

// PfifoObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadPfifoObjects or ebpf.CollectionSpec.LoadAndAssign.
type PfifoObjects struct {
	PfifoPrograms
	PfifoMaps
}

func (o *PfifoObjects) Close() error {
	return _PfifoClose(
		&o.PfifoPrograms,
		&o.PfifoMaps,
	)
}

// PfifoMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadPfifoObjects or ebpf.CollectionSpec.LoadAndAssign.
type PfifoMaps struct {
}

func (m *PfifoMaps) Close() error {
	return _PfifoClose()
}

// PfifoPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadPfifoObjects or ebpf.CollectionSpec.LoadAndAssign.
type PfifoPrograms struct {
	KprobePfifoEnqueue *ebpf.Program `ebpf:"kprobe__pfifo_enqueue"`
}

func (p *PfifoPrograms) Close() error {
	return _PfifoClose(
		p.KprobePfifoEnqueue,
	)
}

func _PfifoClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pfifo_bpfel_x86.o
var _PfifoBytes []byte
