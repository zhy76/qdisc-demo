// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadQdisc returns the embedded CollectionSpec for Qdisc.
func LoadQdisc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_QdiscBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Qdisc: %w", err)
	}

	return spec, err
}

// LoadQdiscObjects loads Qdisc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*QdiscObjects
//	*QdiscPrograms
//	*QdiscMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadQdiscObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadQdisc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// QdiscSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type QdiscSpecs struct {
	QdiscProgramSpecs
	QdiscMapSpecs
}

// QdiscSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type QdiscProgramSpecs struct {
	KprobeSchDirectXmit *ebpf.ProgramSpec `ebpf:"kprobe__sch_direct_xmit"`
}

// QdiscMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type QdiscMapSpecs struct {
}

// QdiscObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadQdiscObjects or ebpf.CollectionSpec.LoadAndAssign.
type QdiscObjects struct {
	QdiscPrograms
	QdiscMaps
}

func (o *QdiscObjects) Close() error {
	return _QdiscClose(
		&o.QdiscPrograms,
		&o.QdiscMaps,
	)
}

// QdiscMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadQdiscObjects or ebpf.CollectionSpec.LoadAndAssign.
type QdiscMaps struct {
}

func (m *QdiscMaps) Close() error {
	return _QdiscClose()
}

// QdiscPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadQdiscObjects or ebpf.CollectionSpec.LoadAndAssign.
type QdiscPrograms struct {
	KprobeSchDirectXmit *ebpf.Program `ebpf:"kprobe__sch_direct_xmit"`
}

func (p *QdiscPrograms) Close() error {
	return _QdiscClose(
		p.KprobeSchDirectXmit,
	)
}

func _QdiscClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed qdisc_bpfel_x86.o
var _QdiscBytes []byte
